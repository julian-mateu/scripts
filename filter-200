#!/bin/bash
set -e -o pipefail

main() {
    parse_arguments "${@}"

    local SOURCE_FILE="${1}"

    if [[ ! -f "${SOURCE_FILE}" ]];
    then
        echo "ERROR: file ${SOURCE_FILE} does not exist" >&2
        exit 1;
    fi

    export -f get_200_pages
    export -f get_page
    local header
    header="$(head -n 1 "${SOURCE_FILE}" | sed 's/\r//g')"
    echo "${header},URL,Downloaded Bytes,Response Code"
    tail -n +2 "${SOURCE_FILE}" | parallel -d "\r\n" -P 200 get_200_pages {} 
}

get_200_pages() {
    local line="${1}"
    local url
    url="$(echo "${line}" | awk -F, '{print $3}')"
    get_page "${line}" "${url}" #| grep -v ",2[0-9][0-9]$" | awk -F"," '{print $(NF-2)}'
}

get_page() {
    local line="${1}"
    local url="${2}"
    local response

    # Try getting the page
    response=$(curl --insecure -L --retry 5 --max-time 10 -s -o /dev/null -w "%{size_download},%{http_code}" \
        "${url}"
    )
    local response_code
    response_code="$(echo "${response}" | awk -F, '{print $2}')"

    if [[ "${response_code}" =~ ^2[0-9][0-9]$ ]]
    then
        echo "${line},${url},${response}"
        return
    fi


    # Try adding user-agent and other headers
    response=$(curl --insecure -L --retry 5 --max-time 10 -s -o /dev/null -w "%{size_download},%{http_code}" \
        --header "user-agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.94 Safari/537.36" \
        --header "accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
        --header "accept-encoding:gzip, deflate, sdch, br" \
        "${url}"
    )
    response_code="$(echo "${response}" | awk -F, '{print $2}')"

    if [[ "${response_code}" =~ ^2[0-9][0-9]$ ]]
    then
        echo "${line},${url},${response}"
        return
    fi

    # Try getting headers only
    response=$(curl -I --insecure -L --retry 5 --max-time 10 -s -o /dev/null -w "%{size_download},%{http_code}" \
        "${url}"
    )
    echo "${line},${url},${response}"
}

parse_arguments() {
    while getopts "h" o; do
        case "${o}" in
        h)
            usage
            exit 0
            ;;
        \? | *)
            usage
            exit 1
            ;;
        esac
    done

    shift $((OPTIND - 1))

    if [[ "${#}" -ne 1 ]]; then
        echo "Illegal number of parameters ${0}: got ${#} but expected exactly 1: ${*}" >&2
        usage
        exit 1
    fi
}

usage() {
    cat <<-EOF >&2
		Usage: ${0##*/} [-h] <SOURCE_FILE>
		
		Filters valid URLs (return 200) from a <SOURCE_FILE>, and prints the valid ones to stdout.
		<SOURCE_FILE> is assumed to be a CSV file with "," separator, and the 3rd column will be used as URL.
		To avoid any problems with the script, make sure to replace all "," with another character before
		exporting to CSV.
		 
		NOTE: requires GNU Parallel installed (https://www.gnu.org/software/parallel/)
		
		    -h          display this help and exit
	EOF
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "${@}"
fi
